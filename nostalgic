#!/usr/bin/env bash

# ** The MIT License **
#
# Copyright (c) 2012 Eric Davis (aka Insanum)
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
# Dude... just buy me a beer. :-)

#
# Home: https://github.com/insanum/nostalgic
#
# Author: Eric Davis <http://insanum.com>
#

REPOS=$HOME/dots
DEST=$HOME
DRYRUN=0
SKIP_CONFLICTS=0
FIX_CONFLICTS=0
PREFIXED=0

CLR_CLEAR="\e[0m"
CLR_CYAN="\e[1;36m"
CLR_RED="\e[1;31m"
CLR_BLUE="\e[1;34m"
CLR_YELLOW="\e[1;33m"
CLR_GREEN="\e[1;32m"
CLR_MAGENTA="\e[1;35m"

function err()
{
    echo -e "${CLR_RED}ERROR: $@${CLR_CLEAR}"
    exit
}

function log()
{
    local clr=$1
    shift
    echo -e "${clr}${@}${CLR_CLEAR}"
}

# Get the repo name from an URL
function parse_url()
{
    SED=sed
    if [[ $OSTYPE =~ solaris || $OSTYPE =~ darwin ]]; then
        SED=gsed
    fi
    printf "$1" | $SED -r 's#^.*/([^/.]+)(\.git)?$#\1#'
}

function Clone()
{
    [[ -z "$1" ]] && err "clone requires an argument"

    local repo="$REPOS/`parse_url $1`"
    [[ -e "$repo" ]] && err "$repo exists"

    log $CLR_GREEN "--> cloning [$repo]"
    if [[ $DRYRUN -eq 0 ]]; then
        git clone "$1" "$repo"
    fi
}

function List()
{
    for repo in `ls "$REPOS"`; do
        local repo="$REPOS/$repo"
        [[ ! -d "$repo" ]] && continue
        cd "$repo"
        log $CLR_GREEN "--> repo [$repo] cloned from [`git config remote.origin.url`]"
        cd "$OLDPWD"
    done
}

function RepoExists()
{
    if [[ ! -d "$1" || ! -d "$1/.git" ]]; then
        err "could not $2 $1 (repo does not exist)"
    fi
}

function PullRepo()
{
    RepoExists "$1" 'pull'

    log $CLR_GREEN "--> git pull for repo [$1]"
    if [[ $DRYRUN -eq 0 ]]; then
        cd "$1"
        git pull
        cd "$OLDPWD"
    fi
}

function Pull()
{
    [[ -z "$1" ]] && err "pull requires an argument"

    if [[ "$1" == ALL ]]; then
        for r in `ls "$REPOS"`; do
            local repo="$REPOS/$r"
            [[ ! -d "$repo" ]] && continue
            PullRepo "$repo"
        done
    else
        local repo="$REPOS/$1"
        PullRepo "$repo"
    fi
}

function StatusRepo()
{
    RepoExists "$1" 'status'

    log $CLR_GREEN "--> git status for repo [$1]"
    cd "$1"
    git status
    cd "$OLDPWD"
}

function Status()
{
    [[ -z "$1" ]] && err "status requires an argument"

    if [[ "$1" == ALL ]]; then
        for r in `ls "$REPOS"`; do
            local repo="$REPOS/$r"
            [[ ! -d "$repo" ]] && continue
            StatusRepo "$repo"
        done
    else
        local repo="$REPOS/$1"
        StatusRepo "$repo"
    fi
}

function SymlinkRepo()
{
    local repo=$1
    RepoExists "$repo" 'symlink'

    cd "$repo"

    log $CLR_MAGENTA "--> symlinking repo [$repo]"

    local prefix="."
    local find='find * -type f -print'

    if [[ $PREFIXED -eq 1 ]]; then
        prefix=""
        find='find .* -type d -name .git -prune -o
                      -type d -name .    -prune -o
                      -type d -name ..   -prune -o
                      -type f -print'
    fi

    for file in `$find`; do
        local slink="$DEST/$prefix$file"

        if [[ -e "$slink" && `readlink "$slink"` == "$repo/$file" ]]; then
            log $CLR_CYAN "--> [$file] already symlinked"
            continue
        fi

        if [[ -e "$slink" ]]; then
            if [[ $SKIP_CONFLICTS -eq 1 ]]; then
                log $CLR_YELLOW "(!) conflict symlink exists for [$file]"
                continue
            fi

            if [[ $FIX_CONFLICTS -eq 0 ]]; then
                log $CLR_YELLOW "conflict for [$file] -> [`readlink "$slink"`]"
                read -p "fix $file? [y/(n)]" fix
                [[ $fix =~ [Nn] ]] && continue
            else
                log $CLR_YELLOW "(!) fixing conflict for [$file]"
            fi

            [[ $DRYRUN -eq 0 ]] && rm -f "$slink"
        fi

        local d=`dirname $file`
        if [[ -n "$d" && "$d" != "." ]]; then
            d=$DEST/$prefix$d
            if [[ ! -d "$DEST/$d" ]]; then
                [[ $DRYRUN -eq 0 ]] && mkdir -p $d
                log $CLR_GREEN "--> mkdir [$d]"
            fi
        fi

        [[ $DRYRUN -eq 0 ]] && ln -s "$repo/$file" "$slink"
        log $CLR_GREEN "--> symlinked [$slink] -> [$repo/$file]"
    done

    cd "$OLDPWD"
}

function Symlink()
{
    [[ -z "$1" ]] && err "symlink requires an argument"

    if [[ "$1" == ALL ]]; then
        for r in `ls "$REPOS"`; do
            local repo="$REPOS/$r"
            [[ ! -d "$repo" ]] && continue
            SymlinkRepo "$repo"
        done
    else
        local repo="$REPOS/$1"
        SymlinkRepo "$repo"
    fi
}

function Track()
{
    [[ -z "$1" || -z "$2" ]] && err "track requires two arguments"

    local repo="$REPOS/$2"

    if [[ $PREFIXED -eq 1 ]]; then
        local newfile="$repo/${1}"
    else
        local newfile="$repo/${1#.}"
    fi

    RepoExists "$repo" 'track'

    [[ ! -e "$1" ]] && err "the file $1 does not exist"

    if [[ -e "$newfile" ]]; then
        if [[ $FIX_CONFLICTS -eq 0 ]]; then
            err "the file [$1] already exists in the repo [$2]"
        else
            log $CLR_RED "overwriting [$1] which already exists in the repo [$2]"
        fi
    fi

    log $CLR_GREEN "--> adding [$newfile] to repo [$repo]"
    log $CLR_GREEN "--> symlinked [$newfile] to [$1]"

    if [[ $DRYRUN -eq 0 ]]; then
        local tgtdir="`dirname $1`"
        [[ "$tgtdir" != "." ]] && mkdir -p "$repo/${tgtdir#.}"

        mv -f "$1" "$newfile"
        ln -s "$newfile" "$1"

        cd "$repo"
        git add "${1#.}"
        cd "$OLDPWD"
    fi

    Status $2
}

function Usage()
{
cat <<EOM
 Usage: nostalgic [options] <cmd> [args]

 Options:
   -n         dry run (no changes are performed)
   -s         skip conflicts
   -f         auto fix conflicts (default is interactive)
   -p         include files already starting with a dot
   -r <dir>   repo dir (default = \$HOME/dots)
   -d <dir>   symlink destination dir (default = \$HOME)

 Commands:
   clone <uri>            clone URI as a repo to be used
   list                   list cloned repos being used
   pull <repo>            git pull for the repo ('ALL' for all repos)
   status <repo>          git status for the repo ('ALL' for all repos)
   symlink <repo>         create symlinks for the repo ('ALL' for all repos)
   track <file> <repo>    add a file to a repo, git add and symlink the file
EOM
}

[[ -x `which git` ]] || err "git not found"

while getopts "nsfpr:d:" opt; do
    case $opt in
        n) DRYRUN=1         ;;
        s) SKIP_CONFLICTS=1 ;;
        f) FIX_CONFLICTS=1  ;;
        p) PREFIXED=1       ;;
        r) REPOS=$OPTARG    ;;
        d) DEST=$OPTARG     ;;
        *) break
    esac
done

shift $((OPTIND-1))

if [[ "${REPOS:0:1}" != "/" ]]; then
    err "repos dir '$REPOS' is not a full pathname"
fi

if [[ ! -d "$REPOS" ]]; then
    log $CLR_GREEN  "repos dir '$REPOS' does not exist (creating)"
    mkdir -p "$REPOS"
fi

if [[ "${DEST:0:1}" != "/" ]]; then
    err "symlink destination dir '$DEST' is not a full pathname"
fi

if [[ ! -d "$DEST" ]]; then
    err "symlink destination dir '$DEST' does not exist"
fi

case $1 in
    clone)   shift; Clone $@   ;;
    list)    List              ;;
    pull)    shift; Pull $@    ;;
    status)  shift; Status $@  ;;
    symlink) shift; Symlink $@ ;;
    track)   shift; Track $@   ;;
    *)       Usage             ;;
esac

