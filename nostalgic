#!/usr/bin/env bash

# ** The MIT License **
#
# Copyright (c) 2012 Eric Davis (aka Insanum)
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
# Dude... just buy me a beer. :-)

#
# Home: https://github.com/insanum/nostalgic
#
# Author: Eric Davis <http://insanum.com>
#

NBASEDIR=$HOME/.nostalgic

OLD_DOT_REPOS=$HOME/dots
DOT_REPOS=$NBASEDIR/dots
BIN_REPOS=$NBASEDIR/bins
REPOS=$DOT_REPOS
DOT_DEST=$HOME
BIN_DEST=$HOME/bin
DEST=$DOT_DEST
DOT_PREFIX=.
BIN_PREFIX=
CFGFILE=$HOME/.nostalgicrc
MODE=dot
DRYRUN=0
SKIP_CONFLICTS=0
FIX_CONFLICTS=0

CLR_CLEAR="\e[0m"
CLR_CYAN="\e[1;36m"
CLR_RED="\e[1;31m"
CLR_BLUE="\e[1;34m"
CLR_YELLOW="\e[1;33m"
CLR_GREEN="\e[1;32m"
CLR_MAGENTA="\e[1;35m"

function err()
{
    echo -e "${CLR_RED}ERROR: $@${CLR_CLEAR}"
    exit
}

function log()
{
    local clr=$1
    shift
    echo -e "${clr}${@}${CLR_CLEAR}"
}

# determines whether the file is a candidate for linking
function verify_symlink_file()
{
  [[ $MODE = 'dot' ]] || [[ -x "$1" ]]
}

# strips a base path from a file path to determine the relative path
# (file must be under base path for this to work correctly)
# 1: base path
# 2: possible non-absolute file path
function rel_src_path()
{
  # strip the destination prefix from file path
  local absfilepath=$(readlink -f $2)
  local absbasepath=$(readlink -f $1)
  local relpath=${absfilepath##$absbasepath}
  echo ${relpath#/}
}

# converts a repository path to a filesystem path
# this implements the dotfile naming convention
# 1: the relative file path in the repo
function from_repo_path()
{
  # in dotfile mode we prefix a dot
  local prefix_var="${MODE^^}_PREFIX"
  local prefix=${!prefix_var}
  echo "$prefix$1"
}

# converts a filesystem path to a repo path
# this implements the dotfile naming convention
# 1: the relative file path in the filesystem
function to_repo_path()
{
  local prefix_var="${MODE^^}_PREFIX"
  local prefix=${!prefix_var}
  echo "${1#$prefix}"
}

# Get the repo name from an URL
function parse_url()
{
    SED=sed
    if [[ $OSTYPE =~ solaris || $OSTYPE =~ darwin ]]; then
        SED=gsed
    fi
    printf "$1" | $SED -r 's#^.*/([^/.]+)(\.git)?$#\1#'
}

function Clone()
{
    [[ -z "$1" ]] && err "clone requires an argument"

    local repo="$REPOS/`parse_url $1`"
    [[ -e "$repo" ]] && err "$repo exists"

    log $CLR_GREEN "--> cloning [$repo]"
    if [[ $DRYRUN -eq 0 ]]; then
        git clone "$1" "$repo"
    fi
}

function List()
{
    for repo in `ls "$REPOS"`; do
        repo="$REPOS/$repo"
        [[ ! -d "$repo" ]] && continue
        cd "$repo"
        log $CLR_GREEN "--> repo [$repo] cloned from [`git config remote.origin.url`]"
        cd "$OLDPWD"
    done
}

function RepoExists()
{
    if [[ ! -d "$1" || ! -d "$1/.git" ]]; then
        err "could not $2 $1 (repo does not exist)"
    fi
}

function PullRepo()
{
    RepoExists "$1" 'pull'

    log $CLR_GREEN "--> git pull for repo [$1]"
    if [[ $DRYRUN -eq 0 ]]; then
        cd "$1"
        git pull
        cd "$OLDPWD"
    fi
}

function Pull()
{
    [[ -z "$1" ]] && err "pull requires an argument"

    if [[ "$1" == ALL ]]; then
        for r in `ls "$REPOS"`; do
            repo="$REPOS/$r"
            [[ ! -d "$repo" ]] && continue
            PullRepo "$repo"
        done
    else
        local repo="$REPOS/$1"
        PullRepo "$repo"
    fi
}

function StatusRepo()
{
    RepoExists "$1" 'status'

    log $CLR_GREEN "--> git status for repo [$1]"
    cd "$1"
    git status
    cd "$OLDPWD"
}

function Status()
{
    [[ -z "$1" ]] && err "status requires an argument"

    if [[ "$1" == ALL ]]; then
        for r in `ls "$REPOS"`; do
            repo="$REPOS/$r"
            [[ ! -d "$repo" ]] && continue
            StatusRepo "$repo"
        done
    else
        local repo="$REPOS/$1"
        StatusRepo "$repo"
    fi
}

function SymlinkRepo()
{
    local repo=$1
    RepoExists "$repo" 'symlink'

    cd "$repo"

    log $CLR_MAGENTA "--> symlinking repo [$repo]"

    # uncomment this if '.' prefixed files are in the repo
    #shopt -s dotglob

    for file in *; do
        SLINK="$DEST/$(from_repo_path $file)"

        if ! verify_symlink_file "$repo/$file"; then
            log $CLR_CYAN "--> [$file] skipping non-executable file"
            continue
        fi

        if [[ -e "$SLINK" && `readlink "$SLINK"` == "$repo/$file" ]]; then
            log $CLR_CYAN "--> [$file] already symlinked"
            continue
        fi

        if [[ -e "$SLINK" ]]; then
            if [[ $SKIP_CONFLICTS -eq 1 ]]; then
                log $CLR_YELLOW "(!) conflict symlink exists for [$file]"
                continue
            fi

            if [[ $FIX_CONFLICTS -eq 0 ]]; then
                log $CLR_YELLOW "conflict for [$file] -> [`readlink "$SLINK"`]"
                read -p "fix $file? [y/(n)]" fix
                [[ $fix =~ [Nn] ]] && continue
            else
                log $CLR_YELLOW "(!) fixing conflict for [$file]"
            fi

            [[ $DRYRUN -eq 0 ]] && rm -f "$SLINK"
        fi

        [[ $DRYRUN -eq 0 ]] && ln -s "$repo/$file" "$SLINK"
        log $CLR_GREEN "--> symlinked [$file]"
    done

    # uncomment this if '.' prefixed files are in the repo
    #shopt -u dotglob

    cd "$OLDPWD"
}

function Symlink()
{
    [[ -z "$1" ]] && err "symlink requires an argument"

    if [[ "$1" == ALL ]]; then
        for r in `ls "$REPOS"`; do
            repo="$REPOS/$r"
            [[ ! -d "$repo" ]] && continue
            SymlinkRepo "$repo"
        done
    else
        local repo="$REPOS/$1"
        SymlinkRepo "$repo"
    fi
}

function Track()
{
    [[ -z "$1" || -z "$2" ]] && err "track requires two arguments"

    local repo="$REPOS/$2"
    # strip the destination prefix from file path
    local relpath=$(rel_src_path ${DEST} $1)
    local reporelpath=$(to_repo_path $relpath)
    local newfile="$repo/$reporelpath"

    RepoExists "$repo" 'track'

    [[ ! -e "$1" ]] && err "the file $1 does not exist"

    if [[ -e "$newfile" ]]; then
        if [[ $FIX_CONFLICTS -eq 0 ]]; then
            err "the file [$1] already exists in the repo [$2]"
        else
            log $CLR_RED "overwriting [$1] which already exists in the repo [$2]"
        fi
    fi

    log $CLR_GREEN "--> adding [$newfile] to repo [$repo]"
    log $CLR_GREEN "--> symlinked [$newfile] to [$1]"

    if [[ $DRYRUN -eq 0 ]]; then
        TGTDIR="$(dirname "$reporelpath")"
        [[ "$TGTDIR" != "." ]] && mkdir -p "$repo/$TGTDIR"

        mv -f "$1" "$newfile"
        ln -s "$newfile" "$1"

        cd "$repo"
        git add "$reporelpath"
        cd "$OLDPWD"
    fi

    Status $2
}

function Usage()
{
cat <<EOM
 Usage: nostalgic [options] <cmd> [args]

 Options:
   -n         dry run (no changes are performed)
   -s         skip conflicts
   -f         auto fix conflicts (default is interactive)
   -x         enable binary/executable mode
   -r <dir>   repo dir (default: dot = \$HOME/.nostalgic/dots; bin = \$HOME/.nostalgic/bins)
   -d <dir>   symlink destination dir (default: dot = \$HOME; bin = \$HOME/bin)
   -c <file>  use config file (default = \$HOME/.nostalgicrc)
   -m <mode>  file mode: dot or bin

 Commands:
   clone <uri>            clone URI as a repo to be used
   list                   list cloned repos being used
   pull <repo>            git pull for the repo ('ALL' for all repos)
   status <repo>          git status for the repo ('ALL' for all repos)
   symlink <repo>         create symlinks for the repo ('ALL' for all repos)
   track <file> <repo>    add a file to a repo, git add and symlink the file
EOM
}

[[ -x `which git` ]] || err "git not found"

while getopts "nsfxr:d:c:m:" opt; do
    case $opt in
        n) DRYRUN=1         ;;
        s) SKIP_CONFLICTS=1 ;;
        f) FIX_CONFLICTS=1  ;;
        x) MODE=bin ;;
        r) REPOS=$OPTARG    ;;
        d) DEST=$OPTARG     ;;
        c) CFGFILE=$OPTARG  ;;
        m) MODE=$OPTARG  ;;
        *) break
    esac
done

shift $((OPTIND-1))

case $MODE in
  d|dot)
    MODE=dot
    REPOS=$DOT_REPOS 
    DEST=$DOT_DEST
    # backwards compatibility - set dot dest to the "old" dot dest
    # if it already exists
    [[ -d $OLD_DOT_REPOS ]] && REPOS=$OLD_DOT_REPOS
    ;; 
  b|bin)
    MODE=bin
    REPOS=$BIN_REPOS
    DEST=$BIN_DEST
    ;;
  *) err "Invalid mode. Specify: 'dot' or 'bin'";;
esac

[[ -f "$CFGFILE" ]] && . "$CFGFILE"

if [[ "${REPOS:0:1}" != "/" ]]; then
    err "repos dir '$REPOS' is not a full pathname"
fi

if [[ ! -d "$REPOS" ]]; then
    log $CLR_GREEN  "repos dir '$REPOS' does not exist (creating)"
    mkdir -p "$REPOS"
fi

if [[ "${DEST:0:1}" != "/" ]]; then
    err "symlink destination dir '$DEST' is not a full pathname"
fi

if [[ ! -d "$DEST" ]]; then
    err "symlink destination dir '$DEST' does not exist"
fi

case $1 in
    clone)   shift; Clone $@   ;;
    list)    List              ;;
    pull)    shift; Pull $@    ;;
    status)  shift; Status $@  ;;
    symlink) shift; Symlink $@ ;;
    track)   shift; Track $@   ;;
    *)       Usage             ;;
esac

